Experimental rsget.pl core. A shape of new things to come.

The goal is to adopt rsget.pl to server-like environment, possibly destroying
any compatibility with earlier versions.

Remarks:
- only daemon mode
- xmlrpc or similar communication method
  -- I'm considering rewriting RPC::PlServer not to use Net::Daemon, but
    IO::Socket directly (either UNIX or INET). RPC::PlClient may need updating.
- no integrated input/output interfaces
- store data in SQL database (will support at least SQlite3, PgSQL and MySQL)
- multi-user support

Salvaged clients:
- output-only terminal visualization
- input/output list file writer (with syntax similar to actual file list,
  or simpler one)
- input/output perl cgi application to create webbrowser interface

Clients planned in future:
- I/O ncurses client (something like rtorrent, caca for captcha ?)
	see scraps/showimage.pl
- I/O readline client, with captcha displaying !
- I/O gtk client (try to use code from slimrat)
- port cgi to php (for simplicity)
  -- probably very complicated (thugh not impossible) with storable-based RPC
    communication
- port cgi to mod_perl (for speed)
- kde/gnome tray icon (inform about completed downloads, ask captcha)

Other ideas:
- create http plugin repository, to easily update plugins without
  svn client
  -- http://rsget.pl/download/plugins
- store downloaded plugins in database
- simple text-based communication (could be useful for some more advanced
    hooks)


* $ rsget.pl --help
usage: rsget.pl [OPTS] COMMAND1 [OPTS1] [ARGS1] -- COMMAND2 [OPTS2] [ARGS2]

Common options:
   --local=FILE           Use UNIX socket for communication
   --remote=[HOST:]PORT   Use TCP for communication

Commands are:
   addlink    Add links from command line to download links
   addlist    Add links from list file to download links
   cgi        CGI interface
   core       Start daemon
   curses     Curses interface
   gtk        GTK interface
   readline   Readline interface
   tray       Tray icon
See 'rsget.pl --help [command]' or 'rsget.pl --help-all' for more information.

'addlink' help:
   Arguments: <link1> <link2> <link3a> + <link3b> + <link3c> <link4>

'addlist' help:
   Arguments: <file1> <flie2>

* rsget.pl command should be a wrapper calling core and/or clients and
  interconnecting them internally or externally

- start daemon:
  $ rsget.pl core --fork

- add link to daemon:
  $ rsget.pl addlink <http://...>
   or
  $ rsget.pl add <http://...>

- add link list to daemon:
  $ rsget.pl addlist <file.list>
   or
  $ rsget.pl add <flie.list>

- start core (do not fork), and download some links, (exit after):
  $ rsget.pl core -- add <http://..>

- start curses client and connect do daemon:
  $ rsget.pl curses

- start curses with core:
  $ rsget.pl core -- curses

- most clients and core should be able to coexist
  $ rsget.pl --local core -- addlink <link1> <link2> -- addlist <file.list> -- gtk


* some TODO found lying around:

# Curl.pm: try making servers think we're just a proxy for some other host
#  -- unlikely this is going to work.
#   X-Forwarded-For: XX.XX.XXX.XXX
#   Cache-Control: bypass-client=XX.XX.XX.XXX

